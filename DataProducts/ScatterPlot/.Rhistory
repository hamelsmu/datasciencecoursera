'raw_timestamp_part_1', 'raw_timestamp_part_2', 'classe', NACols))]
#Subset All Data To Exclude Offenders
Train = Train[, c(ColumnsToKeep, 'classe')]
Test = Test[, ColumnsToKeep]
#Summarize Training Data by num_window.
MeanNA = function(x){
return(mean(x, na.rm = T))
}
MTrain = aggregate(. ~ num_window, data = Train, MeanNA)
MTrain$classe = as.factor(MTrain$classe)
#Split Test Set into Test & Validation
index = createDataPartition(MTrain$classe, p= .8, list = FALSE)
MTrain = MTrain[index, ]
MValidate = MTrain[-index, ]
#Alternate Version of Training Set Split Into X & Y
XTrain = MTrain[, 1:ncol(MTrain) - 1]
YTrain = MTrain$classe
library(FSelector)
#See What Relevant Features Are - But Exclude Num Window
RelevantFeatures = cfs(classe ~. , MTrain[2:54])
RelevantFeatures
CSx = preProcess(XTrain, method = c('center', 'scale'))
CSXtrain = predict(CSx, XTrain)
PCAx = princomp(CSXtrain)
summary(PCAx)
TC = trainControl(method = 'cv', number = 10)
rfGrid = expand.grid(mtry = (1:15))
PCAx = preProcess(XTrain, method = 'pca', thresh = .8)
XTrainPCA = predict(PCAx, XTrain)
rfPCA = train(x = XTrainPCA, y = YTrain, method = 'rf', trainControl = TC, tuneGrid = rfGrid)
rf = train(classe~., data = MTrain, method = 'rf',
trainControl = TC, tuneGrid = rfGrid, preProcess = c('center', 'scale'))
rfCFS = train(classe~., data = MTrain[,c(RelevantFeatures, 'classe')], method = 'rf', preProcess = c('center', 'scale'),
trainControl = TC, tuneGrid = rfGrid)
resamps <- resamples(list(rf.plain= rf,
rf.pca = rfPCA,
rf.cfs = rfCFS))
trellis.par.set(caretTheme())
dotplot(resamps, main = 'Model Comparison: Random Forest With and Without Feature Selection', ylab = 'Model Used')
library(ggplot2)
library(reshape2)
results = data.frame('mtry' = rfPCA$results$mtry, 'rfPCA' = rfPCA$results$Accuracy, 'rfCFS' = rfCFS$results$Accuracy, 'rf' = rf$results$Accuracy)
Mresults = melt(results, id.var = 'mtry')
names(Mresults) = c('mtry', 'Model.Type', 'Accuracy')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters')
rf
rf$finalModel
rf$bestTune
summary(PCAx)
PCAx = princomp(CSXtrain)
summary(PCAx)
head(summary(PCAx))
summary(PCAx)
class(summary(PCAx))
plot(summary(PCAx))
plot(PCAx)
test = summary(PCAx)
test$scores
clear
clear()
test$cutoff
?princomp
test[0]
test[1]
test[3]
test[4]
test[5]
test[6]
test[6]
test[7]
test[8]
test[9]
PCAx = princomp(CSXtrain, cutoff = .9)
summary(PCAx)
biplot(PCAx)
biplot(PCAx, color = classe)
biplot(PCAx, color = PCAx$classe)
biplot(PCAx, color = 'green')
warnings()
biplot(PCAx, colour = 'green')
plot(predict(PCAx, XTrain)[, 1], predict(PCAx, XTrain)[, 2])
plot(predict(PCAx, XTrain)[, 1], predict(PCAx, XTrain)[, 2], color = 'red')
plot(predict(PCAx, XTrain)[, 1], predict(PCAx, XTrain)[, 2], col = 'red')
plot(predict(PCAx, XTrain)[, 1], predict(PCAx, XTrain)[, 2], col = YTrain)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters')
library(ggplot2)
library(reshape2)
results = data.frame('mtry' = rfPCA$results$mtry, 'rfPCA' = rfPCA$results$Accuracy, 'rfCFS' = rfCFS$results$Accuracy, 'rf' = rf$results$Accuracy)
Mresults = melt(results, id.var = 'mtry')
names(Mresults) = c('mtry', 'Model.Type', 'Accuracy')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults)
bestprams
bestparams
bestparams = data.frame('RF.PCA' = rfPCA$bestTune, 'RF.CFS' = rfCFS$bestTune, 'RF' = rf$bestTune)
names(bestparams) = c('RF.PCA', 'RF.CFS', 'RF')
bestparams
rfPCA
rfPCA$finalModel
MResults
Mresults
Mresults[c(2,16,39), ]
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ])
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10, label = mtry)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10, label = Mresults$mtry)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10) + geom_text(data =  Mresults[c(2,16,39), aes(x,y, label = mtry))
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10) + geom_text(data =  Mresults[c(2,16,39), ], aes(x,y, label = mtry))
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10) + geom_text(data =  Mresults[c(2,16,39), ])
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10) + geom_text(data =  Mresults[c(2,16,39), ], label = Mresults$mtry)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10) + geom_text(data =  Mresults[c(2,16,39), ], label = Mresults[c(2,16,39), ]$mtry)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10, label = Mresults[c(2,16,39), ]$mtry) + geom_text(data =  Mresults[c(2,16,39), ], label = Mresults[c(2,16,39), ]$mtry)
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters') +
geom_point(data = Mresults[c(2,16,39), ], size = 10, label = Mresults[c(2,16,39), ]$mtry)
```{r, results='hide', message=FALSE, warning=FALSE}
rf$results
rf$bestTune
Mresults = melt(results, id.var = 'mtry')
Mresults
Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune
rf$bestTune
rf$bestTune[1]
int(rf$bestTune)
num(rf$bestTune)
rf$bestTune == 9
Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune
Mresults$mtry == rf$bestTune
Mresults$mtry == rf$bestTune
Mresults$mtry == 9
rf$bestTune
rf$bestTune[1,1]
Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune[1,1]
(Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune[1,1]) or (Mresults$variable == 'rfPCA' & Mresults$mtry == rfPCA$bestTune[1,1]) or
(Mresults$variable == 'rfCFS' & Mresults$mtry == rfCFS$bestTune[1,1])
(Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune[1,1]) | (Mresults$variable == 'rfPCA' & Mresults$mtry == rfPCA$bestTune[1,1])
(Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune[1,1]) | (Mresults$variable == 'rfPCA' & Mresults$mtry == rfPCA$bestTune[1,1]) |
(Mresults$variable == 'rfCFS' & Mresults$mtry == rfCFS$bestTune[1,1])
OptimalParams = MResults[(Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune[1,1]) | (Mresults$variable == 'rfPCA' & Mresults$mtry == rfPCA$bestTune[1,1]) |
(Mresults$variable == 'rfCFS' & Mresults$mtry == rfCFS$bestTune[1,1]), ]
results = data.frame('mtry' = rfPCA$results$mtry, 'rfPCA' = rfPCA$results$Accuracy, 'rfCFS' = rfCFS$results$Accuracy, 'rf' = rf$results$Accuracy)
Mresults = melt(results, id.var = 'mtry')
OptimalParams = Mresults[(Mresults$variable == 'rf' & Mresults$mtry == rf$bestTune[1,1]) | (Mresults$variable == 'rfPCA' & Mresults$mtry == rfPCA$bestTune[1,1]) |
(Mresults$variable == 'rfCFS' & Mresults$mtry == rfCFS$bestTune[1,1]), ]
names(Mresults) = c('mtry', 'Model.Type', 'Accuracy')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret') +
geom_point(data = OptimalParams, size = 5, label = OptimalParams$mtry)
Mresults
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type))
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line()
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret') +
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line()
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret') +
geom_point(data = OptimalParams, size = 5, label = OptimalParams$mtry)
OptimalParams
names(Mresults) = c('mtry', 'Model.Type', 'Accuracy')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret') + geom_point(data = OptimalParams, size = 5, label = OptimalParams$mtry)
OptimalParams
names(OptimalParams) = c('mtry', 'Model.Type', 'Accuracy')
OptimalParams
names(Mresults) = c('mtry', 'Model.Type', 'Accuracy')
ggplot(data=Mresults, aes(x=mtry, y=Accuracy, group=Model.Type, color = Model.Type)) + geom_line() + ggtitle('Random Forest Models Compared -Tuning Parameters\n Dots Are Optimal Tuning Paremeters Choosen by Caret') + geom_point(data = OptimalParams, size = 5, label = OptimalParams$mtry)
rf
predict(rf, newdata = Test)
answers = predict(rf, newdata = Test)
setwd("~/Dropbox (AlixPartners)/Analtyics Materials Learning/Coursera/DataScience_Track/PracticalMachineLearning")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers = predict(rf, newdata = Test)
pml_write_files(answers)
convertvals(answers)
convertvals = function(x){
if x == 1:
return('A')
if x==2:
return('B')
if x==3:
return('C')
if x==4:
return('D')
if x==5:
return('E')
}
convertvals(answers)
convertvals = function(x){
if(x == 1){
return('A')}
if(x == 2){
return('B')}
if(x == 3){
return('C')}
if(x == 4){
return('D')}
if(x == 5){
return('E')}
}
convertvals(answers)
sapply(answers, convertvals)
tanswers = sapply(answers, convertvals)
pml_write_files(tanswers)
?predict
?predict.randomForest
predict(rf, newdata = Test, type = 'prob')
predict(rf, newdata = Test)
predict(rf, newdata = Test, type = "raw")
predict(rf, newdata = Test, type = "prob")
install.packages(shiny)
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
runExample("03_reactivity")
data(cars)
head(Cars)
head(cars)
plot(1,2)
library(cars)
data(cars)
library(shiny)
library(cars)
data(cars)
list(names(cars)[[1]]
list(names(cars))[[1]]
names(cars)
names(cars)[1]
ist(names(cars))
list(names(cars))
list('a', 'b')
as.list(names(cars)),
as.list(names(cars))
runApp()
setwd("~/Dropbox (AlixPartners)/Analtyics Materials Learning/Coursera/DataScience_Track/DataProducts")
ls
list.files()
runApp()
names(cars)[3]
runApp()
),
)#,
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(cars)
ggplot(cars$Price, cars$Mileage)
library(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
names(cars)
rPlot(1,2)
require(rCharts)
rPlot(Price ~ Mileage, data = cars)
rPlot(Price ~ Mileage, data = cars, type = "point")
rPlot(Price ~ Mileage, data = cars, type = "point", color = "gear")
data(mtcars)
library(shiny)
data(mtcars)
names(mtcars)
data("mpg" ~ "cyl", color = "hp", data = mtcars)
rPlot("mpg" ~ "cyl", color = "hp", data = mtcars)
rPlot(mpg ~ cyl, color = "hp", data = mtcars)
rPlot(mpg ~ cyl, color = "hp", data = mtcars, type = 'point')
rPlot(mpg ~ cyl, color = "hp", data = mtcars, type = 'point', alpha = .5)
rPlot(mpg ~ cyl, color = "hp", data = mtcars, type = 'point', alpha = .2)
runApp()
rPlot("mpg ~ cyl", color = "hp", data = mtcars, type = 'point', alpha = .2)
rPlot(mtcars$mpg ~ mtcars$cyl, color = "hp", data = mtcars, type = 'point', alpha = .2)
rPlot(mpg ~ cyl, color = "hp", data = mtcars, type = 'point', alpha = .2)
rPlot(mpg ~ wt, color = "hp", data = mtcars, type = 'point', alpha = .2)
rPlot(mpg ~ wt, color = "hp", data = mtcars, type = 'point', alpha = .2, main = "Hi")
rPlot(mpg ~ wt, color = "hp", data = mtcars, type = 'point', size = list(const = 2))
runApp()
runApp()
plot(1,2, main = 'hi')
runApp()
ggplot
?ggplot
runApp()
paste('1', '2')
a = "hi"
paste(a, 'there')
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_point
ggplot(mtcars$wt, mtcars$mpg) + geom_point()
ggplot(aes(mtcars$wt, mtcars$mpg)) + geom_point()
ggplot(mtcars, aes(wt, mpg)) + geom_point()
dat = mtcars[, c('mpg', 'wt', 'cyl')]
dat
ggplot(dat, aes(dat[, 1], dat[, 2])) + geom_point()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
ggplot(mtcars, aes('mpg', 'cyl')) + geom_point()
?aes
ggplot(mtcars, aes(x = 'mpg', y = 'cyl')) + geom_point()
ggplot(mtcars, aes(mtcars[, c('mpg')], mtcars[, c('cyl')])) + geom_point()
data(mtcars)
runApp()
runApp()
p1 = ggplot(mtcars, aes(mtcars[, c(input$X)], mtcars[, input$Y])) +
runApp()
runApp()
input$X = mpg
input$X = 'mpg'
paste("p1 = ggplot(mtcars, aes(", 'mpg', ", ", 'cyl', ") + geom_point()"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(mtcars)
str(mtcars)
data(mtcars)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$vs = as.factor(mtcars$vs)
mtcars$am = as.factor(mtcars$am)
mtcars$gear = as.factor(mtcars$gear)
mtcars$carb = as.factor(mtcars$carb)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pt = ggplot(1,2) + geom_point()
pt = ggplot(aes(1,2)) + geom_point()
pt = ggplot(c(1,2), aes(1,2)) + geom_point()
runApp()
runApp()
runApp()
runApp()
runApp()
?switch
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
upper('la')
runApp()
runApp()
?ggtitle
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggthemes)
install.packages(ggthemes)
install.packages('ggthemes')
??ggthemes
help(ggthemes)
library(ggthemes)
?ggthemes
help(ggthemes)
runApp()
ggthemes_data
runApp()
ggthemes_data$tableau
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste('a', 'b')
?paste
runApp()
paste('p2 = theme_', 'econ', '()', sep = '')
p2 = theme_econ()
p2 = theme_economist()
runApp()
"p2 = theme_economist()"
test = "p2 = theme_economist()"
eval(parse(text(test)))
class(parse(text(test)))
test
parse(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='hamel', token='CEF90000C053F53A13A298FB634B4C32', secret='k/4E+HbiUxrEZBe2eMId2yqr8l6mUpqcVXzKvyQN')
library(shinyapps)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x = c("")
runApp()
str(1)
runApp()
paste(c('hi', 'bye'))
paste(c('hi', 'bye'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Dropbox (AlixPartners)/Analtyics Materials Learning/Coursera/DataScience_Track/GitHubDataScience/DataProducts/ScatterPlot")
runApp()
getwd()
setwd("~/Dropbox (AlixPartners)/Analtyics Materials Learning/Coursera/DataScience_Track/GitHubDataScience/DataProducts/ScatterPlot")
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
names(mtcars)
as.factor(mtcars$cyl)
